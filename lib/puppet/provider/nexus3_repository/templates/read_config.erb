def repositories = repository.repositoryManager.browse()
def infos = repositories.findResults { repository ->
  def config = repository.getConfiguration()
  def (providerType, type) = config.recipeName.split('-')

  if (type == 'group') {
    return null
  }

  def cleanup = config.attributes('cleanup')
  def storage = config.attributes('storage')
  def proxy = config.attributes('proxy')
  def group = config.attributes('group')
  def maven = config.attributes('maven')
  def yum   = config.attributes('yum')
  def docker = config.attributes('docker')
  def dockerProxy = config.attributes('dockerProxy')
  def apt = config.attributes('apt')
  def aptSigning = config.attributes('aptSigning')
  def aptHosted = config.attributes('aptHosted')
  def httpclient = config.attributes('httpclient');
  def authentication = httpclient.child('authentication');
  [
    name: config.repositoryName,
    type: type,
    provider_type: providerType,
    online: config.isOnline(),
    cleanup_policies: cleanup.get('policyName'),
    write_policy: storage.get('writePolicy'),
    blobstore_name: storage.get('blobStoreName'),
    strict_content_type_validation: storage.get('strictContentTypeValidation'),
    remote_url: proxy.get('remoteUrl'),
    version_policy: maven.get('versionPolicy')?.toLowerCase(),
    layout_policy: maven.get('layoutPolicy')?.toLowerCase(),
    remote_auth_type: authentication.get('type') ? authentication.get('type') : 'none',
    remote_user: authentication.get('username'),
    remote_password: authentication.get('password'),
    remote_ntlm_host: authentication.get('ntlmHost'),
    remote_ntlm_domain: authentication.get('ntlmDomain'),
    depth: yum.get('repodataDepth').toString(),
    http_port: docker.get('httpPort'),
    https_port: docker.get('httpsPort'),
    v1_enabled: docker.get('v1Enabled'),
    force_basic_auth: docker.get('forceBasicAuth'),
    index_type: dockerProxy.get('indexType'),
    index_url: dockerProxy.get('indexUrl'),
    distribution: apt.get('distribution'),
    is_flat: apt.get('flat'),
    pgp_keypair: aptSigning.get('keypair'),
    pgp_keypair_passphrase: aptSigning.get('passphrase'),
    asset_history_limit: aptHosted.get('assetHistoryLimit'),
  ]
}
return groovy.json.JsonOutput.toJson(infos)
