<%= File.read(File.join(templates_folder, '../../groovy_utils.erb')) %>

def ldapConfigurationManager = container.lookup(org.sonatype.nexus.ldap.persist.LdapConfigurationManager.class.name)
def ldapConfigurations = ldapConfigurationManager.listLdapServerConfigurations()

def infos = ldapConfigurations.collect { ldapConfiguration ->
  def connection = ldapConfiguration.getConnection()
  def host = connection.getHost()
  def mapping = ldapConfiguration.getMapping()
  def groupType = ''

  if (mapping.getUserMemberOfAttribute()) {
    groupType = 'dynamic'
  } else if (mapping.getGroupBaseDn() || mapping.getGroupObjectClass() || mapping.getGroupIdAttribute() || mapping.getGroupMemberAttribute() || mapping.getGroupMemberFormat()) {
    groupType = 'static'
  }

  [
    name: ldapConfiguration.getName(),
    order: ldapConfiguration.getOrder(),
    protocol: host.getProtocol(),
    hostname: host.getHostName(),
    port: host.getPort(),
    search_base: connection.getSearchBase(),
    max_incidents_count: connection.getMaxIncidentsCount(),
    connection_retry_delay: connection.getConnectionRetryDelay(),
    connection_timeout: connection.getConnectionTimeout(),
    sasl_realm: connection.getSaslRealm(),

    authentication_scheme: connection.getAuthScheme(),
    username: connection.getSystemUsername(),
    password: connection.getSystemPassword(),

    user_base_dn: mapping.getUserBaseDn(),
    user_email_attribute: mapping.getEmailAddressAttribute(),
    user_id_attribute: mapping.getUserIdAttribute(),
    user_object_class: mapping.getUserObjectClass(),
    user_password_attribute: mapping.getUserPasswordAttribute(),
    user_real_name_attribute: mapping.getUserRealNameAttribute(),
    user_subtree: mapping.isUserSubtree(),
    user_member_of_attribute: ensureDefault(mapping.getUserMemberOfAttribute()),

    group_base_dn: mapping.getGroupBaseDn() ?: '',
    group_id_attribute: mapping.getGroupIdAttribute() ?: '',
    group_member_attribute: mapping.getGroupMemberAttribute() ?: '',
    group_member_format: mapping.getGroupMemberFormat() ?: '',
    group_object_class: mapping.getGroupObjectClass() ?: '',
    group_subtree: mapping.isGroupSubtree(),

    ldap_filter: mapping.getLdapFilter(),
    ldap_groups_as_roles: mapping.isLdapGroupsAsRoles(),
    group_type: groupType,
  ]
}

return groovy.json.JsonOutput.toJson(infos)
